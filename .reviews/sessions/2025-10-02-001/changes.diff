diff --git a/src/MinUddannelse/Configuration/WeekLetter.cs b/src/MinUddannelse/Configuration/WeekLetter.cs
index fa22a6b..7227214 100644
--- a/src/MinUddannelse/Configuration/WeekLetter.cs
+++ b/src/MinUddannelse/Configuration/WeekLetter.cs
@@ -5,4 +5,5 @@ public class WeekLetter
     public int RetryIntervalHours { get; set; } = 2;
     public int MaxRetryDurationHours { get; set; } = 48;
     public bool PostOnStartup { get; set; }
+    public bool RunThisWeeksAIAnalysisOnStartup { get; set; }
 }
diff --git a/src/MinUddannelse/Program.cs b/src/MinUddannelse/Program.cs
index 5c476ad..ba44eac 100644
--- a/src/MinUddannelse/Program.cs
+++ b/src/MinUddannelse/Program.cs
@@ -51,6 +51,8 @@ public class Program
 
             var childAgents = await StartChildAgentsAsync(serviceProvider, logger);
 
+            await TriggerStartupAIAnalysisAsync(serviceProvider, logger);
+
             logger.LogInformation("MinUddannelse started");
 
             var cancellationTokenSource = new CancellationTokenSource();
@@ -137,6 +139,143 @@ public class Program
         return childAgents;
     }
 
+    private static async Task TriggerStartupAIAnalysisAsync(IServiceProvider serviceProvider, ILogger logger)
+    {
+        try
+        {
+            var config = serviceProvider.GetRequiredService<Config>();
+            if (!config.WeekLetter.RunThisWeeksAIAnalysisOnStartup)
+            {
+                return;
+            }
+
+            logger.LogInformation("Running startup AI analysis for current week");
+
+            var schedulingService = serviceProvider.GetRequiredService<ISchedulingService>();
+            var weekLetterReminderService = serviceProvider.GetRequiredService<IWeekLetterReminderService>();
+            var weekLetterService = serviceProvider.GetRequiredService<IWeekLetterService>();
+            var channelManager = serviceProvider.GetRequiredService<IChannelManager>();
+
+            var now = DateTime.Now;
+            var currentWeek = System.Globalization.ISOWeek.GetWeekOfYear(now);
+            var currentYear = now.Year;
+
+            foreach (var child in config.MinUddannelse?.Children ?? new List<Child>())
+            {
+                try
+                {
+                    logger.LogInformation("Running AI analysis for {ChildName} week {Week}/{Year}",
+                        child.FirstName, currentWeek, currentYear);
+
+                    // Get current week letter
+                    var weekLetter = await weekLetterService.GetOrFetchWeekLetterAsync(child, DateOnly.FromDateTime(DateTime.Now), false);
+                    if (weekLetter == null)
+                    {
+                        logger.LogWarning("No week letter found for {ChildName} week {Week}/{Year}",
+                            child.FirstName, currentWeek, currentYear);
+                        continue;
+                    }
+
+                    // Get repository services to check for existing posted letter
+                    var weekLetterRepository = serviceProvider.GetRequiredService<IWeekLetterRepository>();
+
+                    // Check if this week letter has already been posted
+                    var existingPostedLetter = await weekLetterRepository.GetPostedLetterByHashAsync(child.FirstName, currentWeek, currentYear);
+
+                    string contentHash;
+                    if (existingPostedLetter != null)
+                    {
+                        // Use existing content hash from posted letter
+                        contentHash = existingPostedLetter.ContentHash;
+                        logger.LogInformation("Using existing posted letter hash for {ChildName} week {Week}/{Year}",
+                            child.FirstName, currentWeek, currentYear);
+                    }
+                    else
+                    {
+                        // Create content hash from current week letter
+                        var content = ExtractWeekLetterContent(weekLetter);
+                        contentHash = ComputeContentHash(content);
+
+                        // Create a minimal posted letter record for the AI analysis to work
+                        await weekLetterRepository.StoreWeekLetterAsync(
+                            child.FirstName, currentWeek, currentYear, contentHash,
+                            weekLetter.ToString(), false, false); // Not posted to channels, just for AI analysis
+
+                        logger.LogInformation("Created posted letter record for AI analysis: {ChildName} week {Week}/{Year}",
+                            child.FirstName, currentWeek, currentYear);
+                    }
+
+                    // Run AI analysis
+                    var extractionResult = await weekLetterReminderService.ExtractAndStoreRemindersAsync(
+                        child.FirstName, currentWeek, currentYear, weekLetter, contentHash);
+
+                    if (extractionResult.Success && extractionResult.RemindersCreated > 0)
+                    {
+                        logger.LogInformation("Created {Count} reminders for {ChildName}",
+                            extractionResult.RemindersCreated, child.FirstName);
+
+                        // Send success message to channels
+                        var successMessage = FormatReminderSuccessMessage(extractionResult.RemindersCreated, currentWeek, extractionResult.CreatedReminders);
+                        await channelManager.SendMessageToChildChannelsAsync(child.FirstName, successMessage);
+                    }
+                    else if (extractionResult.Success && extractionResult.NoRemindersFound)
+                    {
+                        logger.LogInformation("No reminders found for {ChildName}", child.FirstName);
+                    }
+                    else
+                    {
+                        logger.LogWarning("AI analysis failed for {ChildName}: {Error}",
+                            child.FirstName, extractionResult.ErrorMessage);
+                    }
+                }
+                catch (Exception ex)
+                {
+                    logger.LogError(ex, "Error running startup AI analysis for {ChildName}", child.FirstName);
+                }
+            }
+
+            logger.LogInformation("Startup AI analysis completed");
+        }
+        catch (Exception ex)
+        {
+            logger.LogError(ex, "Error during startup AI analysis");
+        }
+    }
+
+    private static string FormatReminderSuccessMessage(int reminderCount, int weekNumber, List<CreatedReminderInfo> createdReminders)
+    {
+        var message = $"Jeg har oprettet {reminderCount} påmindelser for uge {weekNumber}:";
+
+        // Group reminders by day
+        var groupedByDay = createdReminders
+            .GroupBy(r => r.Date.ToString("dddd", new System.Globalization.CultureInfo("da-DK")))
+            .OrderBy(g => createdReminders.First(r => r.Date.ToString("dddd", new System.Globalization.CultureInfo("da-DK")) == g.Key).Date);
+
+        foreach (var dayGroup in groupedByDay)
+        {
+            foreach (var reminder in dayGroup)
+            {
+                var timeInfo = !string.IsNullOrEmpty(reminder.EventTime) ? $" kl. {reminder.EventTime}" : "";
+                message += $"\n• {char.ToUpper(dayGroup.Key[0])}{dayGroup.Key.Substring(1)}: {reminder.Title}{timeInfo}";
+            }
+        }
+
+        return message;
+    }
+
+    private static string ExtractWeekLetterContent(dynamic weekLetter)
+    {
+        return MinUddannelse.Content.WeekLetters.WeekLetterContentExtractor.ExtractContent((Newtonsoft.Json.Linq.JObject)weekLetter, null);
+    }
+
+    private static string ComputeContentHash(string content)
+    {
+        using var sha = System.Security.Cryptography.SHA256.Create();
+        var bytes = System.Text.Encoding.UTF8.GetBytes(content);
+        var hash = sha.ComputeHash(bytes);
+        return Convert.ToBase64String(hash);
+    }
+
     private static void ConfigureGracefulShutdown(List<IChildAgent> childAgents, CancellationTokenSource cancellationTokenSource, ILogger logger)
     {
         Console.CancelKeyPress += (_, e) =>
diff --git a/src/MinUddannelse/appsettings.example.json b/src/MinUddannelse/appsettings.example.json
index 195095e..67b015c 100644
--- a/src/MinUddannelse/appsettings.example.json
+++ b/src/MinUddannelse/appsettings.example.json
@@ -95,6 +95,7 @@
 	"WeekLetter": {
 		"RetryIntervalHours": 2,
 		"MaxRetryDurationHours": 48,
-		"PostOnStartup": true
+		"PostOnStartup": true,
+		"RunThisWeeksAIAnalysisOnStartup": false
 	}
 }
\ No newline at end of file
