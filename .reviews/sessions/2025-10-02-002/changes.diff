diff --git a/src/Aula.Tests/AI/Services/AgentServiceTests.cs b/src/Aula.Tests/AI/Services/AgentServiceTests.cs
index 17fb3af..4c46234 100644
--- a/src/Aula.Tests/AI/Services/AgentServiceTests.cs
+++ b/src/Aula.Tests/AI/Services/AgentServiceTests.cs
@@ -108,7 +108,6 @@ public class AgentServiceTests
         var serviceType = typeof(AgentService);
 
         // Act & Assert
-        Assert.NotNull(serviceType.GetMethod("LoginAsync"));
         Assert.NotNull(serviceType.GetMethod("GetWeekLetterAsync"));
         Assert.NotNull(serviceType.GetMethod("GetWeekScheduleAsync"));
         Assert.NotNull(serviceType.GetMethod("SummarizeWeekLetterAsync"));
@@ -178,21 +177,6 @@ public class AgentServiceTests
         Assert.Equal("loggerFactory", parameters[4].Name);
     }
 
-    [Fact]
-    public async Task LoginAsync_AlwaysReturnsTrue()
-    {
-        // Arrange
-        _mockMinUddannelseClient.Setup(x => x.LoginAsync()).ReturnsAsync(true);
-        var service = new AgentService(_mockMinUddannelseClient.Object, _mockDataService.Object,
-            _config, _mockOpenAiService.Object, _mockLoggerFactory.Object);
-
-        // Act
-        var result = await service.LoginAsync();
-
-        // Assert
-        Assert.True(result);
-        _mockMinUddannelseClient.Verify(x => x.LoginAsync(), Times.Once());
-    }
 
     [Fact]
     public async Task GetWeekLetterAsync_WithCache_ReturnsCachedData()
@@ -239,7 +223,7 @@ public class AgentServiceTests
     }
 
     [Fact]
-    public async Task GetWeekLetterAsync_DoesNotCheckLoginStatus()
+    public async Task GetWeekLetterAsync_CallsMinUddannelseClientDirectly()
     {
         // Arrange
         var child = new Child { FirstName = "Test", LastName = "Child" };
@@ -250,11 +234,10 @@ public class AgentServiceTests
         var service = new AgentService(_mockMinUddannelseClient.Object, _mockDataService.Object,
             _config, _mockOpenAiService.Object, _mockLoggerFactory.Object);
 
-        // Act - Call without calling LoginAsync first
+        // Act
         await service.GetWeekLetterAsync(child, DateOnly.FromDateTime(DateTime.Today), useCache: false);
 
-        // Assert - Should not call LoginAsync internally
-        _mockMinUddannelseClient.Verify(x => x.LoginAsync(), Times.Never());
+        // Assert - Should directly call GetWeekLetter
         _mockMinUddannelseClient.Verify(x => x.GetWeekLetter(It.IsAny<Child>(), It.IsAny<DateOnly>(), It.IsAny<bool>()), Times.Once());
     }
 
diff --git a/src/Aula.Tests/External/MinUddannelse/MinUddannelseClientTests.cs b/src/Aula.Tests/External/MinUddannelse/MinUddannelseClientTests.cs
index 2c4082e..95315e2 100644
--- a/src/Aula.Tests/External/MinUddannelse/MinUddannelseClientTests.cs
+++ b/src/Aula.Tests/External/MinUddannelse/MinUddannelseClientTests.cs
@@ -55,16 +55,17 @@ public class MinUddannelseClientTests
     }
 
     [Fact]
-    public void Constructor_WithConfig_InitializesCorrectly()
+    public void Constructor_WithHttpClientFactory_InitializesCorrectly()
     {
-        var client = new MinUddannelseClient(_testConfig, _mockHttpClientFactory.Object);
+        var client = new MinUddannelseClient(_mockHttpClientFactory.Object, "testuser", "testpass",
+            "https://test.login.url", "https://test.success.url", "https://test.api.url", "/test/path");
         Assert.NotNull(client);
     }
 
     [Fact]
-    public void Constructor_WithConfigAndServices_InitializesCorrectly()
+    public void Constructor_WithServices_InitializesCorrectly()
     {
-        var client = new MinUddannelseClient(_testConfig, _mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
+        var client = new MinUddannelseClient(_mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
         Assert.NotNull(client);
     }
 
@@ -75,7 +76,7 @@ public class MinUddannelseClientTests
         _mockWeekLetterRepository.Setup(s => s.GetStoredWeekLetterAsync(_testChild.FirstName, 25, 2024))
             .ReturnsAsync(storedContent);
 
-        var client = new MinUddannelseClient(_testConfig, _mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
+        var client = new MinUddannelseClient(_mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
 
         var result = await client.GetStoredWeekLetter(_testChild, 25, 2024);
 
@@ -87,7 +88,8 @@ public class MinUddannelseClientTests
     [Fact]
     public async Task GetStoredWeekLetter_NoSupabaseService_ReturnsNull()
     {
-        var client = new MinUddannelseClient(_testConfig, _mockHttpClientFactory.Object);
+        var client = new MinUddannelseClient(_mockHttpClientFactory.Object, "testuser", "testpass",
+            "https://test.login.url", "https://test.success.url", "https://test.api.url", "/test/path");
 
         var result = await client.GetStoredWeekLetter(_testChild, 25, 2024);
 
@@ -100,7 +102,7 @@ public class MinUddannelseClientTests
         _mockWeekLetterRepository.Setup(s => s.GetStoredWeekLetterAsync(_testChild.FirstName, 25, 2024))
             .ThrowsAsync(new InvalidOperationException("Database connection failed"));
 
-        var client = new MinUddannelseClient(_testConfig, _mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
+        var client = new MinUddannelseClient(_mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
 
         var result = await client.GetStoredWeekLetter(_testChild, 25, 2024);
 
@@ -114,7 +116,7 @@ public class MinUddannelseClientTests
         _mockWeekLetterRepository.Setup(s => s.GetStoredWeekLetterAsync(_testChild.FirstName, 25, 2024))
             .ReturnsAsync("invalid json content {{{");
 
-        var client = new MinUddannelseClient(_testConfig, _mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
+        var client = new MinUddannelseClient(_mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
 
         var result = await client.GetStoredWeekLetter(_testChild, 25, 2024);
 
@@ -123,17 +125,17 @@ public class MinUddannelseClientTests
     }
 
     [Fact]
-    public void Constructor_WithNullConfig_ThrowsNullReferenceException()
+    public void Constructor_WithNullRepository_ThrowsArgumentNullException()
     {
-        Assert.Throws<NullReferenceException>(() => new MinUddannelseClient((Config)null!, _mockHttpClientFactory.Object));
+        Assert.Throws<ArgumentNullException>(() => new MinUddannelseClient(null!, _mockLoggerFactory.Object, _mockHttpClientFactory.Object));
     }
 
     [Fact]
-    public void Constructor_WithConfigAndServices_VerifyDependencyInjection()
+    public void Constructor_WithServices_VerifyDependencyInjection()
     {
-        var client = new MinUddannelseClient(_testConfig, _mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
+        var client = new MinUddannelseClient(_mockWeekLetterRepository.Object, _mockLoggerFactory.Object, _mockHttpClientFactory.Object);
 
         Assert.NotNull(client);
-        _mockLoggerFactory.Verify(x => x.CreateLogger(typeof(MinUddannelseClient).FullName!), Times.Once());
+        _mockLoggerFactory.Verify(x => x.CreateLogger(typeof(MinUddannelseClient).FullName!), Times.Exactly(2));
     }
 }
diff --git a/src/Aula/AI/Services/AgentService.cs b/src/Aula/AI/Services/AgentService.cs
index b506880..e60381b 100644
--- a/src/Aula/AI/Services/AgentService.cs
+++ b/src/Aula/AI/Services/AgentService.cs
@@ -38,11 +38,6 @@ public class AgentService : IAgentService
         _logger = loggerFactory.CreateLogger(nameof(AgentService));
     }
 
-    public async Task<bool> LoginAsync()
-    {
-        _logger.LogInformation("LoginAsync called - authentication now happens per-request");
-        return await _minUddannelseClient.LoginAsync();
-    }
 
     public async Task<JObject?> GetWeekLetterAsync(Child child, DateOnly date, bool useCache = true, bool allowLiveFetch = false)
     {
diff --git a/src/Aula/AI/Services/IAgentService.cs b/src/Aula/AI/Services/IAgentService.cs
index 6302843..f71e489 100644
--- a/src/Aula/AI/Services/IAgentService.cs
+++ b/src/Aula/AI/Services/IAgentService.cs
@@ -1,17 +1,16 @@
-using System;
+using System;
 using Aula.AI.Services;
-using Newtonsoft.Json.Linq;
-using Aula.Configuration;
+using Newtonsoft.Json.Linq;
+using Aula.Configuration;
 using Aula.AI.Services;
-using Aula.Content.WeekLetters;
-
-namespace Aula.AI.Services;
-
+using Aula.Content.WeekLetters;
+
+namespace Aula.AI.Services;
+
 [Obsolete("Use IChildAgentService with IChildContext instead. This interface will be removed in the next major version. " +
-          "For child management, use IChildServiceCoordinator. For child-specific operations, use child-aware services.")]
-public interface IAgentService
+          "For child management, use IChildServiceCoordinator. For child-specific operations, use child-aware services.")]
+public interface IAgentService
 {
-    Task<bool> LoginAsync();
     Task<JObject?> GetWeekLetterAsync(Child child, DateOnly date, bool useCache = true, bool allowLiveFetch = false);
     Task<JObject?> GetWeekScheduleAsync(Child child, DateOnly date, bool useCache = true);
 
@@ -31,5 +30,5 @@ public interface IAgentService
     Task<string> AskQuestionAboutChildrenAsync(Dictionary<string, JObject> childrenWeekLetters, string question, string? contextKey, ChatInterface chatInterface = ChatInterface.Slack);
 
     // Process query for a specific child only - pass null to indicate no child context
-    Task<string> ProcessQueryWithToolsAsync(string query, string contextKey, Child? specificChild, ChatInterface chatInterface = ChatInterface.Slack);
+    Task<string> ProcessQueryWithToolsAsync(string query, string contextKey, Child? specificChild, ChatInterface chatInterface = ChatInterface.Slack);
 }
diff --git a/src/Aula/Aula.csproj b/src/Aula/Aula.csproj
index 1307bb1..f34b5c0 100644
--- a/src/Aula/Aula.csproj
+++ b/src/Aula/Aula.csproj
@@ -53,6 +53,8 @@
     <PackageReference Include="NCrontab" Version="3.3.3" />
     <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
     <PackageReference Include="Betalgo.OpenAI" Version="8.7.2" />
+    <PackageReference Include="Polly" Version="8.5.0" />
+    <PackageReference Include="Polly.Extensions.Http" Version="3.0.0" />
     <PackageReference Include="Portable.BouncyCastle" Version="1.9.0" />
     <PackageReference Include="Slack.Webhooks" Version="1.1.5" />
     <PackageReference Include="SlackAPI" Version="1.1.14" />
diff --git a/src/Aula/External/MinUddannelse/IMinUddannelseClient.cs b/src/Aula/External/MinUddannelse/IMinUddannelseClient.cs
index 9f0d831..ae5f125 100644
--- a/src/Aula/External/MinUddannelse/IMinUddannelseClient.cs
+++ b/src/Aula/External/MinUddannelse/IMinUddannelseClient.cs
@@ -1,22 +1,21 @@
-using System;
+using System;
 using Aula.Core.Models;
 using Aula.External.MinUddannelse;
 using Aula.External.Authentication;
-using Newtonsoft.Json.Linq;
-using Aula.Configuration;
-using Aula.Core.Models;
-
-namespace Aula.External.MinUddannelse;
-
+using Newtonsoft.Json.Linq;
+using Aula.Configuration;
+using Aula.Core.Models;
+
+namespace Aula.External.MinUddannelse;
+
 [Obsolete("Use IChildAuthenticationService with IChildContext instead. This interface will be removed in the next major version. " +
-          "Authentication and data fetching should be done through child-aware services for proper isolation.")]
-public interface IMinUddannelseClient
+          "Authentication and data fetching should be done through child-aware services for proper isolation.")]
+public interface IMinUddannelseClient
 {
-    Task<bool> LoginAsync();
     Task<JObject> GetWeekLetter(Child child, DateOnly date, bool allowLiveFetch = false);
     Task<JObject> GetWeekSchedule(Child child, DateOnly date);
 
     // Week letter storage and retrieval methods
     Task<JObject?> GetStoredWeekLetter(Child child, int weekNumber, int year);
-    Task<List<StoredWeekLetter>> GetStoredWeekLetters(Child? child = null, int? year = null);
+    Task<List<StoredWeekLetter>> GetStoredWeekLetters(Child? child = null, int? year = null);
 }
diff --git a/src/Aula/External/MinUddannelse/MinUddannelseClient.cs b/src/Aula/External/MinUddannelse/MinUddannelseClient.cs
index fda8ad2..ab1c6f1 100644
--- a/src/Aula/External/MinUddannelse/MinUddannelseClient.cs
+++ b/src/Aula/External/MinUddannelse/MinUddannelseClient.cs
@@ -5,43 +5,33 @@ using Aula.External.Authentication;
 using System.Net.Http.Headers;
 using HtmlAgilityPack;
 using Newtonsoft.Json.Linq;
-using Aula.Configuration;
 using Aula.Repositories;
-using Aula.Core.Models;
 using Aula.Content.WeekLetters;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
+using Aula.Configuration;
 
 namespace Aula.External.MinUddannelse;
 
 public class MinUddannelseClient : UniLoginAuthenticatorBase, IMinUddannelseClient
 {
-    private JObject _userProfile = new();
     private readonly IWeekLetterRepository? _weekLetterRepository;
     private readonly ILogger? _logger;
-    private readonly Config? _config;
 
-    public MinUddannelseClient(Config config, IHttpClientFactory httpClientFactory)
-        : this(httpClientFactory, config.UniLogin.Username, config.UniLogin.Password,
-            config.MinUddannelse.SamlLoginUrl,
-            config.MinUddannelse.ApiBaseUrl + "/Node/",
-            config.MinUddannelse.ApiBaseUrl,
-            config.MinUddannelse.StudentDataPath,
-            null)
+    public MinUddannelseClient(IWeekLetterRepository weekLetterRepository, ILoggerFactory loggerFactory, IHttpClientFactory httpClientFactory)
+        : base(httpClientFactory, "", "", // No credentials - will authenticate per-request
+            "https://www.minuddannelse.net/KmdIdentity/Login?domainHint=unilogin-idp-prod&toFa=False",
+            "https://www.minuddannelse.net/Node/",
+            loggerFactory?.CreateLogger<MinUddannelseClient>() ?? Microsoft.Extensions.Logging.Abstractions.NullLogger<MinUddannelseClient>.Instance,
+            "https://www.minuddannelse.net",
+            "/api/stamdata/elev/getElev")
     {
-        _config = config;
-    }
+        ArgumentNullException.ThrowIfNull(weekLetterRepository);
+        ArgumentNullException.ThrowIfNull(loggerFactory);
+        ArgumentNullException.ThrowIfNull(httpClientFactory);
 
-    public MinUddannelseClient(Config config, IWeekLetterRepository weekLetterRepository, ILoggerFactory loggerFactory, IHttpClientFactory httpClientFactory)
-        : this(httpClientFactory, config.UniLogin.Username, config.UniLogin.Password,
-            config.MinUddannelse.SamlLoginUrl,
-            config.MinUddannelse.ApiBaseUrl + "/Node/",
-            config.MinUddannelse.ApiBaseUrl,
-            config.MinUddannelse.StudentDataPath,
-            loggerFactory.CreateLogger<MinUddannelseClient>())
-    {
-        _config = config;
         _weekLetterRepository = weekLetterRepository;
+        _logger = loggerFactory.CreateLogger<MinUddannelseClient>();
     }
 
     public MinUddannelseClient(IHttpClientFactory httpClientFactory, string username, string password, string loginUrl, string successUrl, string apiBaseUrl, string studentDataPath, ILogger? logger = null)
@@ -76,136 +66,21 @@ public class MinUddannelseClient : UniLoginAuthenticatorBase, IMinUddannelseClie
             return WeekLetterUtilities.CreateEmptyWeekLetter(weekNumber);
         }
 
-        _logger?.LogInformation("Fetching week letter from MinUddannelse for {ChildName} week {WeekNumber}/{Year}",
-            child.FirstName, weekNumber, year);
-
-        var url = string.Format(
-            "{0}{1}?tidspunkt={2}-W{3}&elevId={4}&_={5}",
-            _config?.MinUddannelse.ApiBaseUrl ?? "https://www.minuddannelse.net",
-            _config?.MinUddannelse.WeekLettersPath ?? "/api/stamdata/ugeplan/getUgeBreve",
-            date.Year, WeekLetterUtilities.GetIsoWeekNumber(date), GetChildId(child), DateTimeOffset.UtcNow.ToUnixTimeSeconds());
-        using var httpClient = CreateHttpClient();
-        var response = await httpClient.GetAsync(url);
-        response.EnsureSuccessStatusCode();
-        var json = await response.Content.ReadAsStringAsync();
-
-        var weekLetter = JObject.Parse(json);
-        var weekLetterArray = weekLetter["ugebreve"] as JArray;
-
-        if (weekLetterArray == null || weekLetterArray.Count == 0)
-        {
-            var nullObject = new JObject
-            {
-                ["klasseNavn"] = "N/A",
-                ["uge"] = $"{WeekLetterUtilities.GetIsoWeekNumber(date)}",
-                ["indhold"] = "Der er ikke skrevet nogen ugenoter til denne uge",
-            };
-            weekLetter["ugebreve"] = new JArray(nullObject);
-
-        }
-
-        if (_weekLetterRepository != null && weekLetter != null)
-        {
-            try
-            {
-                var contentHash = WeekLetterUtilities.ComputeContentHash(weekLetter.ToString());
-                await _weekLetterRepository.StoreWeekLetterAsync(
-                    child.FirstName, weekNumber, year, contentHash, weekLetter.ToString());
-                _logger?.LogInformation("Stored week letter to database for {ChildName} week {WeekNumber}/{Year}",
-                    child.FirstName, weekNumber, year);
-            }
-            catch (Exception ex)
-            {
-                _logger?.LogWarning(ex, "Failed to store week letter to database");
-            }
-        }
-
-        return weekLetter ?? WeekLetterUtilities.CreateEmptyWeekLetter(weekNumber);
+        // This client doesn't support live fetching as it requires per-child authentication
+        throw new NotSupportedException(
+            "Live fetching of week letters requires per-child authentication. " +
+            "Use PerChildMinUddannelseClient instead, which supports child-specific credentials and proper authentication.");
     }
 
-    public async Task<JObject> GetWeekSchedule(Child child, DateOnly date)
+    public Task<JObject> GetWeekSchedule(Child child, DateOnly date)
     {
-        var url = string.Format(
-            "{0}/api/stamdata/aulaskema/getElevSkema?elevId={1}&tidspunkt={2}-W{3}&_={4}",
-            _config?.MinUddannelse.ApiBaseUrl ?? "https://www.minuddannelse.net",
-            GetChildId(child), date.Year, WeekLetterUtilities.GetIsoWeekNumber(date), DateTimeOffset.UtcNow.ToUnixTimeSeconds());
-        using var httpClient = CreateHttpClient();
-        var response = await httpClient.GetAsync(url);
-        response.EnsureSuccessStatusCode();
-        var json = await response.Content.ReadAsStringAsync();
-        return JObject.Parse(json);
+        // This client doesn't support live fetching as it requires per-child authentication
+        throw new NotSupportedException(
+            "Live fetching of week schedules requires per-child authentication. " +
+            "Use PerChildMinUddannelseClient instead, which supports child-specific credentials and proper authentication.");
     }
 
 
-    private string? GetChildId(Child child)
-    {
-        if (_userProfile == null) throw new InvalidOperationException("User profile not loaded");
-        var kids = _userProfile["boern"];
-        if (kids == null) throw new InvalidOperationException("No children found in user profile");
-        var id = "";
-        foreach (var kid in kids)
-            if (kid["fornavn"]?.ToString() == child.FirstName)
-                id = kid["id"]?.ToString() ?? "";
-
-        if (id == "") throw new ArgumentException($"Child with first name '{child.FirstName}' not found in user profile");
-
-        return id;
-    }
-
-    public new async Task<bool> LoginAsync()
-    {
-        var login = await base.LoginAsync();
-        if (login)
-        {
-            _userProfile = await ExtractUserProfile();
-            return true;
-        }
-
-        return login;
-    }
-
-    private async Task<JObject> ExtractUserProfile()
-    {
-        using var httpClient = CreateHttpClient();
-        var response = await httpClient.GetAsync(SuccessUrl);
-        var content = await response.Content.ReadAsStringAsync();
-        var doc = new HtmlDocument();
-        doc.LoadHtml(content);
-
-        // Find the script node that contains __tempcontext__5d
-        var script = doc.DocumentNode.Descendants("script")
-            .FirstOrDefault(n => n.InnerText.Contains("__tempcontext__"));
-
-        if (script == null)
-            throw new InvalidDataException("No UserProfile script tag found in response");
-
-        var scriptText = script.InnerText;
-        if (string.IsNullOrWhiteSpace(scriptText))
-            throw new InvalidDataException("UserProfile script content is empty");
-
-        var contextStart = "window.__tempcontext__['currentUser'] = ";
-        var startIndex = scriptText.IndexOf(contextStart);
-        if (startIndex == -1)
-            throw new InvalidDataException("UserProfile context not found in script");
-
-        startIndex += contextStart.Length;
-        var endIndex = scriptText.IndexOf(';', startIndex);
-        if (endIndex == -1 || endIndex <= startIndex)
-            throw new InvalidDataException("Invalid UserProfile context format");
-
-        var jsonText = scriptText.Substring(startIndex, endIndex - startIndex).Trim();
-        if (string.IsNullOrWhiteSpace(jsonText))
-            throw new InvalidDataException("Extracted UserProfile JSON text is empty");
-
-        try
-        {
-            return JObject.Parse(jsonText);
-        }
-        catch (Exception ex)
-        {
-            throw new InvalidDataException($"Failed to parse UserProfile JSON: {ex.Message}", ex);
-        }
-    }
 
     public async Task<JObject?> GetStoredWeekLetter(Child child, int weekNumber, int year)
     {
diff --git a/src/Aula/Program.cs b/src/Aula/Program.cs
index 71f4a7f..bfd7cdc 100644
--- a/src/Aula/Program.cs
+++ b/src/Aula/Program.cs
@@ -23,6 +23,8 @@ using Aula.Core.Security;
 using Aula.Communication.Channels;
 using Aula.Core.Utilities;
 using Aula.Core.Models;
+using Polly;
+using Polly.Extensions.Http;
 
 namespace Aula;
 
@@ -193,6 +195,7 @@ public class Program
         services.AddHttpClient("UniLogin", client =>
         {
             client.DefaultRequestHeaders.UserAgent.ParseAdd("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
+            client.Timeout = TimeSpan.FromMinutes(2); // Explicit timeout
         })
         .ConfigurePrimaryHttpMessageHandler(() => new HttpClientHandler
         {
